/**
 * This script reads the 'playlist-items.json' file generated by the previous script,
 * extracts the video IDs, and fetches the details for each video.
 * The result is saved to a new JSON file named 'videos.json'.
 */
import fs from 'fs'
import { config } from 'dotenv'

const YOUTUBE_API_KEY = config().parsed.YOUTUBE_API_KEY
const PLAYLIST_FILE = config().parsed.PLAYLIST_FILE
const VIDEOS_FILE = config().parsed.VIDEOS_FILE

const playlistData = fs.readFileSync(PLAYLIST_FILE)
const playlist = JSON.parse(playlistData)
const videoIds = playlist.map((video) => video.snippet.resourceId.videoId)

// Fetch video details for each video in the playlist
async function fetchVideoDetails(videoIds) {
  const maxVideosPerRequest = 50
  const videoDetails = []

  // Helper function to split the video IDs into chunks of 50
  const chunkArray = (arr, size) =>
    arr.length > size ? [arr.slice(0, size), ...chunkArray(arr.slice(size), size)] : [arr]

  // Split the array of video IDs into chunks of 50
  const videoIdChunks = chunkArray(videoIds, maxVideosPerRequest)

  for (const chunk of videoIdChunks) {
    const ids = chunk.join(',')
    const url = `https://www.googleapis.com/youtube/v3/videos?part=snippet,contentDetails,statistics&id=${ids}&key=${YOUTUBE_API_KEY}`

    const response = await fetch(url)
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`)
    }

    const data = await response.json()
    videoDetails.push(...data.items)
  }

  return videoDetails
}

console.log('Fetching video details...')

const videoDetails = await fetchVideoDetails(videoIds)
  .then((response) => response)
  .catch((error) => {
    console.error('Error fetching video details:', error)
  })

// Save video metadata to a JSON file
const videoDetailsJSON = JSON.stringify(videoDetails, null, 2)
fs.writeFileSync(VIDEOS_FILE, videoDetailsJSON)
console.log(`Saved video details to ${VIDEOS_FILE}`)
